{"version":3,"file":"test.js","sources":["../src/test.ts"],"sourcesContent":["//This placeholder test.ts file is a subset from the K2 Broker Template project \n//(https://github.com/K2Documentation/K2Documentation.Samples.JavascriptBroker.Template/blob/master/src/test.ts)\n//and is provided here just for reference. It must be modified with the proper objects and methods.\nimport test from 'ava';\nimport '@k2oss/k2-broker-core/test-framework';\nimport './index';\n\nfunction mock(name: string, value: any) \n{\n    global[name] = value;\n}\n\ntest('describe returns the hardcoded instance', async t => {\n    let schema = null;\n    mock('postSchema', function(result: any) {\n        schema = result;\n    });\n\n    await Promise.resolve<void>(ondescribe());\n    \n    t.deepEqual(schema, {\n        objects: {\n            \"todo\": {\n                displayName: \"TODO\",\n                description: \"Manages a TODO list\",\n                properties: {\n                    \"id\": {\n                        displayName: \"ID\",\n                        type: \"number\"\n                    },\n                    \"userId\": {\n                        displayName: \"User ID\",\n                        type: \"number\"\n                    },\n                    \"title\": {\n                        displayName: \"Title\",\n                        type: \"string\"\n                    },\n                    \"completed\": {\n                        displayName: \"Completed\",\n                        type: \"boolean\"\n                    }\n                },\n                methods: {\n                    \"get\": {\n                        displayName: \"Get TODO\",\n                        type: \"read\",\n                        inputs: [ \"id\" ],\n                        outputs: [ \"id\", \"userId\", \"title\", \"completed\" ]\n                    },\n                    \"getParams\": {\n                        displayName: \"Get TODO\",\n                        type: \"read\",\n                        parameters: {\n                            \"pid\" : { displayName: \"param1\", description: \"Description Of Param 1\", type: \"number\"} \n                        },\n                        requiredParameters: [ \"pid\" ],\n                        outputs: [ \"id\" ]\n                    }\n                }\n            }\n        }\n    });\n\n    t.pass();\n});\n\ntest('execute fails with the wrong parameters', async t => {\n    let error = await t.throwsAsync(Promise.resolve<void>(onexecute({\n        objectName: 'test1',\n        methodName: 'unused',\n        parameters: {},\n        properties: {},\n        schema: {}\n    })));\n    \n    t.deepEqual(error.message, 'The object test1 is not supported.');\n\n    error = await t.throwsAsync(Promise.resolve<void>(onexecute({\n        objectName: 'todo',\n        methodName: 'test2',\n        parameters: {},\n        properties: {},\n        schema: {}\n    })));\n    \n    t.deepEqual(error.message, 'The method test2 is not supported.');\n\n    t.pass();\n});\n\ntest('execute passes with method params', async t => {\n    let result: any = null;\n    function pr(r: any) {\n        result = r;\n    }\n\n    mock('postResult', pr);\n\n    await Promise.resolve<void>(onexecute({\n        objectName: 'todo',\n        methodName: 'getParams',\n        parameters: {\n            pid: 456\n        },\n        properties: {},\n        configuration: {},\n        schema: {}\n    }));\n\n    t.deepEqual(result, {\n        id: 456\n    });\n\n    t.pass();\n});\n\ntest('execute passes', async t => {\n\n    let xhr: {[key:string]: any} = null;\n    class XHR {\n        public onreadystatechange: () => void;\n        public readyState: number;\n        public status: number;\n        public responseText: string;\n        private recorder: {[key:string]: any};\n\n        constructor() {\n            xhr = this.recorder = {};\n            this.recorder.headers = {};\n        }\n\n        open(method: string, url: string) {\n            this.recorder.opened = {method, url};   \n        }\n\n        setRequestHeader(key: string, value: string) {\n            this.recorder.headers[key] = value;\n        }\n\n        send() {\n            queueMicrotask(() =>\n            {\n                this.readyState = 4;\n                this.status = 200;\n                this.responseText = JSON.stringify({\n                    \"id\": 123,\n                    \"userId\": 51,\n                    \"title\": \"Groceries\",\n                    \"completed\": false\n                });\n                this.onreadystatechange();\n                delete this.responseText;\n            });\n        }\n    }\n\n    mock('XMLHttpRequest', XHR);\n\n    let result: any = null;\n    function pr(r: any) {\n        result = r;\n    }\n\n    mock('postResult', pr);\n\n    await Promise.resolve<void>(onexecute({\n        objectName: 'todo',\n        methodName: 'get',\n        parameters: {},\n        properties: {\n            \"id\": 123\n        },\n        configuration: {},\n        schema: {}\n    }));\n\n    t.deepEqual(xhr, {\n        opened: {\n            method: 'GET',\n            url: 'https://jsonplaceholder.typicode.com/todos/123'\n        },\n        headers: {\n            'test': 'test value'\n        }\n    });\n\n    t.deepEqual(result, {\n        id: 123,\n        userId: 51,\n        title: \"Groceries\",\n        completed: false\n    });\n\n    t.pass();\n});"],"names":["mock","name","value","global","test","t","schema","result","Promise","resolve","ondescribe","deepEqual","objects","displayName","description","properties","type","methods","inputs","outputs","parameters","requiredParameters","pass","throwsAsync","onexecute","objectName","methodName","error","message","pr","r","pid","configuration","id","xhr","this","recorder","headers","method","url","opened","key","queueMicrotask","_this","readyState","status","responseText","JSON","stringify","onreadystatechange","userId","title","completed"],"mappings":"00BAOA,SAASA,EAAKC,EAAcC,GAExBC,OAAOF,GAAQC,qEAGnBE,EAAK,wEAA2C,WAAMC,gGAC9CC,EAAS,KACbN,EAAK,cAAc,SAASO,GACxBD,EAASC,cAGPC,QAAQC,QAAcC,qBAE5BL,EAAEM,UAAUL,EAAQ,CAChBM,QAAS,MACG,CACJC,YAAa,OACbC,YAAa,sBACbC,WAAY,IACF,CACFF,YAAa,KACbG,KAAM,iBAEA,CACNH,YAAa,UACbG,KAAM,gBAED,CACLH,YAAa,QACbG,KAAM,oBAEG,CACTH,YAAa,YACbG,KAAM,YAGdC,QAAS,KACE,CACHJ,YAAa,WACbG,KAAM,OACNE,OAAQ,CAAE,MACVC,QAAS,CAAE,KAAM,SAAU,QAAS,wBAE3B,CACTN,YAAa,WACbG,KAAM,OACNI,WAAY,KACA,CAAEP,YAAa,SAAUC,YAAa,yBAA0BE,KAAM,WAElFK,mBAAoB,CAAE,OACtBF,QAAS,CAAE,YAO/Bd,EAAEiB,gGAGNlB,EAAK,wEAA2C,WAAMC,yGAChCA,EAAEkB,YAAYf,QAAQC,QAAce,UAAU,CAC5DC,WAAY,QACZC,WAAY,SACZN,WAAY,GACZL,WAAY,GACZT,OAAQ,qBALRqB,SAQJtB,EAAEM,UAAUgB,EAAMC,QAAS,+CAEbvB,EAAEkB,YAAYf,QAAQC,QAAce,UAAU,CACxDC,WAAY,OACZC,WAAY,QACZN,WAAY,GACZL,WAAY,GACZT,OAAQ,cALZqB,SAQAtB,EAAEM,UAAUgB,EAAMC,QAAS,sCAE3BvB,EAAEiB,gGAGNlB,EAAK,kEAAqC,WAAMC,SAEnCwB,yFAAAA,WAAGC,GACRvB,EAASuB,GAFTvB,EAAc,KAKlBP,EAAK,aAAc6B,YAEbrB,QAAQC,QAAce,UAAU,CAClCC,WAAY,OACZC,WAAY,YACZN,WAAY,CACRW,IAAK,KAEThB,WAAY,GACZiB,cAAe,GACf1B,OAAQ,aAGZD,EAAEM,UAAUJ,EAAQ,CAChB0B,GAAI,MAGR5B,EAAEiB,gGAGNlB,EAAK,+CAAkB,WAAMC,WA2ChBwB,yFAAAA,WAAGC,GACRvB,EAASuB,GA1CTI,EAA2B,KAsC/BlC,EAAK,mDA7BGkC,EAAMC,KAAKC,SAAW,QACjBA,SAASC,QAAU,uDAGvBC,EAAgBC,QACZH,SAASI,OAAS,CAACF,OAAAA,EAAQC,IAAAA,4CAGnBE,EAAavC,QACrBkC,SAASC,QAAQI,GAAOvC,4CAI7BwC,gBAAe,WAEXC,EAAKC,WAAa,EAClBD,EAAKE,OAAS,IACdF,EAAKG,aAAeC,KAAKC,UAAU,IACzB,WACI,SACD,uBACI,IAEjBL,EAAKM,4BACEN,EAAKG,sDAOpBvC,EAAc,KAKlBP,EAAK,aAAc6B,YAEbrB,QAAQC,QAAce,UAAU,CAClCC,WAAY,OACZC,WAAY,MACZN,WAAY,GACZL,WAAY,IACF,KAEViB,cAAe,GACf1B,OAAQ,aAGZD,EAAEM,UAAUuB,EAAK,CACbM,OAAQ,CACJF,OAAQ,MACRC,IAAK,kDAETF,QAAS,MACG,gBAIhBhC,EAAEM,UAAUJ,EAAQ,CAChB0B,GAAI,IACJiB,OAAQ,GACRC,MAAO,YACPC,WAAW,IAGf/C,EAAEiB"}